aalias() {
        aliases_file="$HOME/.config/zsh/aliases"
        echo "Enter a name for the alias: "
        read varalias
        echo "What would you like ${varalias} to do?"
        read varcommand
        echo "OK. Saving ${varalias} to ${aliases_file}"
        echo "alias ${varalias}='${varcommand}'" >> "$aliases_file"
}

wgetdl() {
        while read -r line; do
                wget "$line"
        done < "$1"
}

docker-mkvlan() {
        if [ -z "$1" ]; then
                echo "Usage: docker-mkvlan <docker macvlan name>"
                echo "Example: docker-mkvlan macvlan1"
                return 1
        fi
        sudo docker network create -d macvlan \
        --subnet=10.0.0.0/24 \
        --gateway=10.0.0.1 \
        -o parent=enp39s0 \
        $1;
}

mkvlan() {
        if [ -z "$1" ]; then
                echo "Usage: mkvlan <vlan name> <unique ip/24>"
                echo "Example: docker-mkvlan 10.0.0.50/24"
                return 1
        fi
        sudo ip link add "$1" link enp39s0 type macvlan mode bridge;
        sudo ip addr add "$2" dev "$1";
        sudo ip link set "$1" up;
        ## if no default route exists, add route to default gateway
        # sudo ip route add 10.0.0.0/24 dev $2;
}

source /Volumes/meouch/home/${USER}/private.env
mf_mounts="$HOME/.config/zsh/macfuse_mounts.ishfs"
remotes="$HOME/.config/zsh/sshfs_remotes"

# Regex to match where macfuse volumes are mounted and only print the matches
# Saves the output to a file
# mount > /dev/null 2>&1 | rg -Pe "(?:)(.Vol)(.*?)(?=\s\(macfuse)" -o > macfusemounts.tmp > /dev/null 2>&1

ishfs() {
        if [ -z "$1" ]; then
                mount | rg -Pe "(?:)(.Vol)(.*?)(?=\s\(macfuse)" -o > "${mf_mounts}"
        fi
        for i in "$@"; do
            mount | rg $i > /dev/null 2>&1; echo $?
        done
}

mountr() {
    if [ -z "$1" ]; then
        if [[ -s "${remotes}" ]]; then
            while read -r line; do
                remote="$(cut -d' ' -f1 <<<"${line}")"
                local="$(cut -d' ' -f2 <<<"${line}")"
                if [[ $(ishfs ${local}) -eq 1 ]]; then
                    echo "Mounting ${remote} to ${local}"
                    sshfs ${remote} ${local}
                else
                    echo "${remote} is already mounted to ${local}"
                fi
            done < "$remotes"
        else
            echo "No remotes found in ${remotes}"
        fi
    else
        echo "Invalid argument."
    fi
}

umountr() {
    if [ -z "$1" ]; then
        if [[ -s "${remotes}" ]]; then
            while read -r line; do
                remote="$(cut -d' ' -f1 <<<"${line}")"
                local="$(cut -d' ' -f2 <<<"${line}")"
                if [[ $(ishfs ${local}) -eq 0 ]]; then
                    echo "Unmounting ${local} from ${remote}"
                    umount ${local}
                else
                    echo "${remote} is not mounted."
                fi
            done < "$remotes"
        else
            echo "No remotes found in ${remotes}"
        fi
    else
        echo "Invalid argument."
    fi
}

# mountr() {
#     if [ -z "$1" ]; then
#         locals=($l_home $l_sdd1 $l_sdc1)
#         for item in "${locals[@]}"; do
#             if [[ $(ishfs $item) -eq 1 ]]; then
#                 echo "Mounting to ${l_vol}$item"
#                 sshfs $lab3:$item ${l_vol}$item
#             else
#                 echo "${l_vol}$item is already mounted"
#                 return 1
#             fi
#         done
#         $(ishfs) && echo "Mounts:" && cat "${mf_mounts}"
#     else
#         echo "Invalid argument."
#         return 1
#     fi
# }

# umountr() {
#     if [ -z "$1" ]; then
#         if [[ -s "${mf_mounts}" ]]; then
#             echo "Unmounting Filesystems:" && cat "${mf_mounts}" && umount -f $(cat "${mf_mounts}")
#         else
#             echo "No mounts to unmount."
#             return 1
#         fi
#     else
#         echo "Invalid argument."
#         return 1
#     fi
# }
    
alias ls="exa --all --git --header --long --sort=.name --icons --octal-permissions --no-permissions --group-directories-first --tree -L=1"
alias lss="exa --all --git --header --long --sort=mod --icons --octal-permissions --no-permissions --group-directories-first --tree -L=2"
alias lsss="exa --all --git --header --long --sort=mod --icons --octal-permissions --no-permissions --group-directories-first --tree -L=3"
alias lssss="exa --all --git --header --long --sort=mod --icons --octal-permissions --no-permissions --group-directories-first --tree -L=4"
alias dots="exa --long --octal-permissions --no-permissions --no-filesize --inode --time-style iso --git --header --sort=name --all -d --icons -I .*"
alias lsd="ls --only-dirs"

alias showfonts="fc-list : family spacing outline scalable | grep -e spacing=100 -e spacing=90 | grep -e outline=True | grep -e scalable=True"
alias zshconfig="nvim $ZDOTDIR/.zshrc"
alias ohmyzsh="nvim $ZDOTDIR/.oh-my-zsh"
alias ale="code $HOME/.config/zsh/aliases"
alias ales="cat $HOME/.config/zsh/aliases"
alias quit="exit"

alias themes="kitty +kitten themes"
alias rlc="omz reload"
alias wanip="curl -4 icanhazip.com"
